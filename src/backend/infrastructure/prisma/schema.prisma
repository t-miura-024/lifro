datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      Int                      @id @default(autoincrement())
  email                   String                   @unique
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  exercises               Exercise[]
  repMaxGoals             RepMaxGoal[]
  periodVolumeGoals       PeriodVolumeGoal[]
  exerciseDailyVolumeGoals ExerciseDailyVolumeGoal[]
  routines                Routine[]
}

model Set {
  id          Int       @id @default(autoincrement())
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId  Int
  weight      Float
  reps        Int
  date        DateTime
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Exercise {
  id                      Int                      @id @default(autoincrement())
  user                    User                     @relation(fields: [userId], references: [id])
  userId                  Int
  name                    String
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  sets                    Set[]
  repMaxGoals             RepMaxGoal[]
  exerciseDailyVolumeGoals ExerciseDailyVolumeGoal[]
  routineExercises        RoutineExercise[]
}

model RepMaxGoal {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId  Int
  weight      Float
  reps        Int
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model PeriodVolumeGoal {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  volume      Float
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ExerciseDailyVolumeGoal {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId  Int
  volume      Float
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Routine {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  routineExercises RoutineExercise[]
}

model RoutineExercise {
  id          Int       @id @default(autoincrement())
  routine     Routine   @relation(fields: [routineId], references: [id])
  routineId   Int
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])
  exerciseId  Int
  weight      Float
  reps        Int
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
} 